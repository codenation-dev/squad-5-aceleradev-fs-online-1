openapi: 3.0.1
info:
  title: Swagger Banco UATI
  description: 'Esta é a documentação da API do banco UATI'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Aplicação Banco UATI
  url: https://bancouati.io
servers:
- url: https://bancouati.io/api
tags:
- name: Segurança
  description: Controle de acesso
- name: Usuário
  description: Operações do usuário
paths:
  /auth:
    post:
      tags:
      - Segurança
      summary: Login na aplicação do banco UATI
      operationId: authUser
      requestBody:
        description: Credênciais para acesso a aplicação
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthUser'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
        400:
          description: Invalid username or password
          content: {}
        422:
          description: Invalid request body
          content: {}
  /users:
    post:
      tags:
      - Usuário
      summary: Cadastrar um novo usuário
      operationId: createUser
      requestBody:
        description: Dados básicos do usuários
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreation'
      responses:
        201:
          description: successful created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Validation error
          content: {}
        422:
          description: Invalid request body
          content: {}
      security:
        - api_key:
            - 'write:users'
    get:
      tags:
      - Usuário
      summary: Listar os usuários
      operationId: ListUser
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        404:
          description: Users not found
          content: {}
      security:
        - api_key:
            - 'read:users'
  /users/{userId}:
    put:
      tags:
      - Usuário
      summary: Cadastrar um novo usuário
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: ID do usuário
          required: true
          schema:
            type: string
      requestBody:
        description: Dados básicos do usuários
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreation'
      responses:
        204:
          description: successful operation
          content: {}
        400:
          description: Validation error
          content: {}
        422:
          description: Invalid request body
          content: {}
      security:
        - api_key:
            - 'write:users'
    get:
      tags:
      - Usuário
      summary: Listar os usuários
      operationId: GetUser
      parameters:
        - name: userId
          in: path
          description: ID do usuário
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
          content: {}
      security:
        - api_key:
            - 'read:users'
components:
  schemas:
    AuthUser:
      required:
      - username
      - password
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Authentication:
      type: object
      properties:
        token:
          type: string
    UserCreation:
      required:
      - username
      - password
      - name
      - email
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        name:
          type: string
        email:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        password:
          type: string
        name:
          type: string
        email:
          type: string
    UserList:
      type: object
      properties:
        records:
          type: integer
          format: int64
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
  securitySchemes:
    api_key:
      type: apiKey
      name: Authorization
      in: header
